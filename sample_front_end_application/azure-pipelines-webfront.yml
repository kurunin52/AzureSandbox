# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger: none
pr: none

pool:
  vmImage: 'windows-latest'
variables:
  # solution: 'SampleWebApplication/SampleWebApplication.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: builder
  jobs: 
  - job: putAppConfiguration
    steps:  
    - task: AzureAppConfigurationPush@3
      inputs:
        azureSubscription: 'testConnection'
        AppConfigurationEndpoint: 'https://appconfigimporttest.azconfig.io'
        ConfigurationFile: 'config/appconfig.json'
        Separator: ':'
        Prefix: 'PRD:'
        Label: 'Pushtest'
        Tags: '{"isTest": "true"}'
        Strict: false

  - job: buildApp
    steps:
    # - task: NuGetToolInstaller@1

    # - task: NuGetCommand@2
    #   inputs:
    #     restoreSolution: '$(solution)'

    # - task: VSBuild@1
    #   inputs:
    #     solution: '$(solution)'
    #     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    #     platform: '$(buildPlatform)'
    #     configuration: '$(buildConfiguration)'
    # - task: VSTest@2
    #   inputs:
    #     testSelector: 'testAssemblies'
    #     testAssemblyVer2: |
    #       **\*test*.dll
    #       !**\*TestAdapter.dll
    #       !**\obj\**
    #     searchFolder: '$(System.DefaultWorkingDirectory)'
    #     testRunTitle: 'simpleTest'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TEST-*.xml'
        testRunTitle: 'simpleTest'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global security-scan'
    - task: CmdLine@2
      inputs:
        script: 'security-scan $(solution) --export=$(Pipeline.Workspace)\result.sarif'
    - task: PublishPipelineArtifact@1
      displayName: PublishApp
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/SampleWebApplication.zip'
        artifact: 'app'
        publishLocation: 'pipeline'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Pipeline.Workspace)/result.sarif'
        ArtifactName: 'CodeAnalysisLogs'
        publishLocation: 'Container'
    # - task: PublishPipelineArtifact@1
    #   displayName: PublishSscanResult
    #   inputs:
    #     targetPath: '$(Pipeline.Workspace)/result.sarif'
    #     artifact: 'CodeAnalysisLogs'
    #     publishLocation: 'pipeline'

- stage: analyzeJavascript
  dependsOn: builder
  jobs: 
  - job: analyze
    steps: 
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: 'install -g pnpm'
    - task: CmdLine@2
      inputs:
        script: 'pnpm install'
        workingDirectory: '$(Build.SourcesDirectory)\sample_front_end_application'
    - task: CmdLine@2
      inputs:
        script: 'curl https://github.com/github/codeql-cli-binaries/releases/download/v2.9.3/codeql-win64.zip -O -J -L'
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: 'codeql-win64.zip'
        destinationFolder: '$(Pipeline.Workspace)'
        cleanDestinationFolder: false
        overwriteExistingFiles: false
    - task: CmdLine@2
      inputs:
        script: |
          git clone https://github.com/github/codeql.git queries
          mkdir databases
          codeql database create -l=javascript -s=$(Build.SourcesDirectory)\sample_front_end_application -c="pnpm run build" databases\sample_front_end_application
          codeql query compile -j=0 --fast-compilation queries\javascript\ql\src\codeql-suites\javascript-security-extended.qls
          codeql database analyze databases\sample_front_end_application --format=sarif-latest --output=$(Pipeline.Workspace)\analyzerRes_js.sarif queries\javascript\ql\src\codeql-suites\javascript-security-extended.qls
        workingDirectory: '$(Pipeline.Workspace)\codeql'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Pipeline.Workspace)\analyzerRes_js.sarif'
        ArtifactName: 'CodeAnalysisLogs'
        publishLocation: 'Container'

- stage: validation
  dependsOn: analyzeJavascript
  jobs:
  - deployment: DeployApp
    environment: 'SampleWebfront'

- stage: stageB
  dependsOn: validation
  jobs: 
  - job: deployApp
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'app'
        targetPath: '$(Pipeline.Workspace)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'testConnection'
        appType: 'webApp'
        WebAppName: 'kurunin52SampleWebApp'
        packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
